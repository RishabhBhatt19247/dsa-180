GREEDY APPROACH
The key observation here is that we need to pick items which have higher value/weight ratio.

 

Here is the algorithm:

We will calculate the ratio of value/weight for each item.
Sort the items in decreasing order based on this ratio.
We take the item with the highest ratio first and add them until we can’t add a whole item.
Add the next item as much as we can.
Time Complexity
O(N * log(N)), where ‘N’ is the number of items.

 

Since we are sorting the array, the time complexity is O(NlogN).

Space Complexity
O(1), i.e. constant space complexity.


/*
    Time Complexity : O(N * log(N))
    Space Complexity : O(1)

    where N is the number of items.
*/


#include <algorithm>


// Comparator to sort items.
bool compare(pair<int, int>& a, pair<int, int>& b)
{
    double r1 = (double) a.second / a.first;
    double r2 = (double) b.second / b.first;

    return r1 > r2;
}


double maximumValue(vector<pair<int,int>>& items, int n, int w)
{
    // Sort items according to value/weight.
    sort(items.begin(), items.end(), compare);

    double maxValue = 0;
    int currWeight = 0;

    for (int i = 0; i < n; i++)
    {
        if (currWeight + items[i].first <= w)
        {
            currWeight += items[i].first;
            maxValue += items[i].second;
        }
        else
        {
            int remainingWeight = w - currWeight;

            // Pick a fraction of current item.
            maxValue += items[i].second * ((double)remainingWeight / items[i].first);
            break;
        }
    }

    return maxValue;
}
